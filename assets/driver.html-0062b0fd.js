import{_ as n,p as s,q as a,a1 as e}from"./framework-6ff95823.js";const t={},p=e(`<h1 id="分步引导" tabindex="-1"><a class="header-anchor" href="#分步引导" aria-hidden="true">#</a> 分步引导</h1><h2 id="driver-js" tabindex="-1"><a class="header-anchor" href="#driver-js" aria-hidden="true">#</a> <a href="">driver.js</a></h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i driver.js <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Driver <span class="token keyword">from</span> <span class="token string">&quot;driver.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;driver.js/dist/driver.min.css&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;scoped-class&#39;</span><span class="token punctuation">,</span> <span class="token comment">//包裹driver.js弹窗的类名 className to wrap driver.js popover</span>
  <span class="token literal-property property">animate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 高亮元素改变时是否显示动画 Animate while changing highlighted element</span>
  <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0.75</span><span class="token punctuation">,</span>  <span class="token comment">//背景透明度(0 表示只有弹窗并且没有遮罩) Background opacity (0 means only popovers and without overlay)</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>   <span class="token comment">//  元素与边缘的距离 Distance of element from around the edges</span>
  <span class="token literal-property property">allowClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许点击遮罩时关闭 Whether clicking on overlay should close or not</span>
  <span class="token literal-property property">overlayClickNext</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否允许点击遮罩时移到到下一步 Should it move to next step on overlay click</span>
  <span class="token literal-property property">doneBtnText</span><span class="token operator">:</span> <span class="token string">&#39;Done&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 最终按钮上的文本 Text on the final button</span>
  <span class="token literal-property property">closeBtnText</span><span class="token operator">:</span> <span class="token string">&#39;Close&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 当前步骤关闭按钮上的文本 Text on the close button for this step</span>
  <span class="token literal-property property">nextBtnText</span><span class="token operator">:</span> <span class="token string">&#39;Next&#39;</span><span class="token punctuation">,</span> <span class="token comment">//当前步骤下一步按钮上的文本 Next button text for this step</span>
  <span class="token literal-property property">prevBtnText</span><span class="token operator">:</span> <span class="token string">&#39;Previous&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 当前步骤上一步按钮上的文本 Previous button text for this step</span>
  <span class="token literal-property property">showButtons</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否在底部显示控制按钮 Do not show control buttons in footer</span>
  <span class="token literal-property property">keyboardControl</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许通告键盘控制(escape关闭，箭头键用于移动)Allow controlling through keyboard (escape to close, arrow keys to move)</span>
  <span class="token literal-property property">scrollIntoViewOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//  \`scrollIntoView()\` 方法的选项 We use \`scrollIntoView()\` when possible, pass here the options for it if you want any</span>
  <span class="token literal-property property">onHighlightStarted</span><span class="token operator">:</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 元素开将要高亮时调用Called when element is about to be highlighted</span>
  <span class="token literal-property property">onHighlighted</span><span class="token operator">:</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 元素开完全高亮时调用Called when element is fully highlighted</span>
  <span class="token literal-property property">onDeselected</span><span class="token operator">:</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 取消选择时调用 Called when element has been deselected</span>
  <span class="token literal-property property">onReset</span><span class="token operator">:</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 遮罩将要关闭时调用 Called when overlay is about to be cleared</span>
  <span class="token function-variable function">onNext</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">Element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// 任何步骤中移到到下一步时调用Called when moving to next step on any step</span>
  <span class="token function-variable function">onPrevious</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">Element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 任何步骤中移到到上一步时调用Called when moving to next step on any step</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[p];function l(c,r){return s(),a("div",null,o)}const u=n(t,[["render",l],["__file","driver.html.vue"]]);export{u as default};
